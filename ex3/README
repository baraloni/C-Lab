baraloni
===============================================================================
Bar Aloni, ID 305230740, bar.aloni@mail.huji.ac.il
===============================================================================

                           ex.3
                           ----
                          50            |           500
             |     *      |     +       |    *       |      +
eigen        | 0.00143796 | 6.78338e-05 | 1.17624    | 0.00524743
mathlib      | 0.00395211 | 9.4945e-05  | 3.81396    | 0.00831207

  
Answers
-------
1) the program runs faster on smaller input (less operations to preform), and adding
   is done faster than multiplying. also the eigen implementation is faster than mine.
   i assume they used other structures and algorithms to operate more efficiently.
   the random matrice and the 1's matrix are different, but i dont think that this
   can soley explain the differences.

2)  multiplying requires more operations: safe access (.at()) to the matrix's cells
    which makes the operation slow.(ive implemented these according to the naive
    implementation we were guided to use. otherwise i would've used operator []).
    adding copies and operates on the copied matrix:
    accessing the cells efficiently (operator[]), and uses an iterator which is
    implemented the same way (efficient, by std::vector).
    this is the difference.